name: CICD

on:
  pull_request:
    # types: [closed]
    branches: 
      - main

env:
  DOCKER_IMAGE: "agustinlare/galsandbox"
  DOCKER_TAG: ${{ github.sha }}

jobs:
  validate-yaml:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Echo enviroment variable
        run: echo ${{env.DOCKER_IMAGE}}:${{ env.DOCKER_TAG }}

      # - name: Install kubeval
      #   run: |
      #     curl -LO "https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz"
      #     tar xf kubeval-linux-amd64.tar.gz
      #     sudo install kubeval /usr/local/bin/
      #     rm kubeval-linux-amd64.tar.gz

      # - name: Validate Kubernetes manifest
      #   run: kubeval manifest.yaml
  
  code-quality:
    runs-on: ubuntu-latest

    steps:
      - name: Quality gate action mock
        run: echo "No encontre uno que sea gratis"

  build-and-push:
    runs-on: ubuntu-latest
    needs: [validate-yaml, code-quality]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}

  scan-image:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Scan for vulnerabilities mock
        run: echo "Hello, world!" ${{ env.DOCKER_IMAGE }}:latest

      # - name: Scan for vulnerabilities
      #   uses: crazy-max/ghaction-container-scan@v2
      #   with:
      #     image:  ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}

  promote:
    runs-on: ubuntu-latest
    needs: scan-image

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull Docker image
        run: docker pull ${DOCKER_IMAGE}:${DOCKER_TAG}

      - name: Retag Docker image
        run: |
          docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
          echo "::set-output name=retagged-image::${DOCKER_IMAGE}:latest"
          
  deplyo-to-linode:
    runs-on: ubuntu-latest
    needs: [promote, build-and-push, scan-image]

    steps:
      - name: Kubernetes apply mock
        run: echo "Hello, world!" ${{ env.DOCKER_IMAGE }}:latest

      # - name: Checkout code
      #   uses: actions/checkout@v2

      # - name: Kubernetes set context
      #   uses: Azure/k8s-set-context@v1
      #   with:
      #     method: kubeconfig
      #     kubeconfig: ${{ secrets.KUBE_CONFIG }}

      # - name: Kubernetes apply
      #   run: |
      #     kubectl apply -f ./manifest.yaml